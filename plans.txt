/* Query 1: w/out index: 16.853 ms; w/index: 8.380 ms 
Διαλέξαμε ως index το column host_id απο τον πίνακα listing το οποίο είναι foreign key με τον host και το column id απο τον πίνακα host τo οποίo είναι primary key καθως ταξινομούμε τις εγγραφες με το id του host. Γιαυτό το λόγο βλέπουμε βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.

*/
/*EXPLAIN ANALYZE SELECT Host.id, COUNT(*) FROM Listing, Host WHERE
Host.id=Listing.host_id GROUP BY Host.id;*/

/*w/out index*/
"HashAggregate  (cost=3297.70..3361.33 rows=6363 width=12) (actual time=15.355..16.221 rows=6363 loops=1)"
"  Group Key: host.id"
"  ->  Hash Join  (cost=255.26..3239.99 rows=11541 width=4) (actual time=1.382..12.972 rows=11541 loops=1)"
"        Hash Cond: (listing.host_id = host.id)"
"        ->  Seq Scan on listing  (cost=0.00..2954.41 rows=11541 width=4) (actual time=0.015..8.872 rows=11541 loops=1)"
"        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.352..1.352 rows=6363 loops=1)"
"              Buckets: 8192  Batches: 1  Memory Usage: 288kB"
"              ->  Index Only Scan using host_pkey on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.010..0.618 rows=6363 loops=1)"
"                    Heap Fetches: 0"
"Planning Time: 0.346 ms"
"Execution Time: 16.853 ms"

/*w/index*/
"HashAggregate  (cost=652.69..716.32 rows=6363 width=12) (actual time=7.179..8.000 rows=6363 loops=1)"
"  Group Key: host.id"
"  ->  Hash Join  (cost=255.55..594.98 rows=11541 width=4) (actual time=1.412..4.770 rows=11541 loops=1)"
"        Hash Cond: (listing.host_id = host.id)"
"        ->  Index Only Scan using id_indexx on listing  (cost=0.29..309.40 rows=11541 width=4) (actual time=0.008..1.208 rows=11541 loops=1)"
"              Heap Fetches: 0"
"        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.358..1.358 rows=6363 loops=1)"
"              Buckets: 8192  Batches: 1  Memory Usage: 288kB"
"              ->  Index Only Scan using id_index on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.010..0.595 rows=6363 loops=1)"
"                    Heap Fetches: 0"
"Planning Time: 0.230 ms"
"Execution Time: 8.380 ms"

------------------------------------------------------------------------------
/* Query 2: w/out index: 366.451 ms; w/index: 289.608 ms 
Διαλέξαμε ως index το column guests_included απο τον πίνακα price καθως αναζητούμε τις εγγραφες των οποιων το guest included ειναι μεγαλυτερου του 5 . Γιαυτό το λόγο βλέπουμε βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
*/
/*EXPLAIN ANALYZE SELECT id, price FROM Listing, Price WHERE guests_included > 5
AND price > 40;*/

/*w/out index*/
"Nested Loop  (cost=0.29..19388.97 rows=1500330 width=8) (actual time=0.069..310.856 rows=2469774 loops=1)"
"  ->  Index Only Scan using listings2_pkey on listing  (cost=0.29..309.40 rows=11541 width=4) (actual time=0.016..1.688 rows=11541 loops=1)"
"        Heap Fetches: 0"
"  ->  Materialize  (cost=0.00..325.76 rows=130 width=4) (actual time=0.000..0.008 rows=214 loops=11541)"
"        ->  Seq Scan on price  (cost=0.00..325.12 rows=130 width=4) (actual time=0.050..1.737 rows=214 loops=1)"
"              Filter: ((guests_included > 5) AND (price > '40'::numeric))"
"              Rows Removed by Filter: 11327"
"Planning Time: 18.492 ms"
"Execution Time: 366.451 ms"

/*w/index*/
"Nested Loop  (cost=6.27..19232.66 rows=1500330 width=8) (actual time=0.077..241.586 rows=2469774 loops=1)"
"  ->  Index Only Scan using listings2_pkey on listing  (cost=0.29..309.40 rows=11541 width=4) (actual time=0.020..1.312 rows=11541 loops=1)"
"        Heap Fetches: 0"
"  ->  Materialize  (cost=5.99..169.46 rows=130 width=4) (actual time=0.000..0.006 rows=214 loops=11541)"
"        ->  Bitmap Heap Scan on price  (cost=5.99..168.81 rows=130 width=4) (actual time=0.053..0.249 rows=214 loops=1)"
"              Recheck Cond: (guests_included > 5)"
"              Filter: (price > '40'::numeric)"
"              Rows Removed by Filter: 10"
"              Heap Blocks: exact=113"
"              ->  Bitmap Index Scan on id_index2 (cost=0.00..5.96 rows=223 width=0) (actual time=0.030..0.030 rows=224 loops=1)"
"                    Index Cond: (guests_included > 5)"
"Planning Time: 0.154 ms"
"Execution Time: 286.220 ms"
--------------------------------------------------------------------------------------------------
/* ΑΠΟ ΕΡΓΑΣΙΑ 5 */ 

/* Query 3: w/out index: 8.145 ms; w/index: 1.698 ms 
Διαλέξαμε ως index το column bathrooms απο τον πίνακα Room2 καθώς το ερώτημα ψαχνει τις εγγραφες που εχουν κατα κύριο λόγο μπάνια περισσότερα από 4 και ειναι και η προυπόθεση που επηρεάζει πιο πολύ το αποτέλεσμα που θα έχουμε καθώς για παραδειγμα αν χρησιμοποιουσαμε το guest included ειναι πολύ περισσότερες οι εγγραφές που έχουν μεγαλύτερο του 1 ως τιμή άρα δεν θα βοηθούσε και ιδιαίτερα . Γιαυτό το λόγο βλέπουμε και μεγάλη βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
*/

/*EXPLAIN ANALYZE select  Listing.name, Room2.bathrooms, Price.guests_included, Price.security_deposit  from Price
inner join Listing on Price.listing_id = listing.id 
inner join Room2 on Room2.listing_id = listing.id 
where Room2.bathrooms > 4 and Room2.security_deposit> cast(200 as money) and guests_included>1; 
*/
/*w/out index*/

"Nested Loop  (cost=2597.28..2913.20 rows=1 width=53) (actual time=6.250..8.080 rows=7 loops=1)"
"  ->  Hash Join  (cost=2596.99..2911.21 rows=1 width=23) (actual time=6.232..8.028 rows=7 loops=1)"
"        Hash Cond: (price.listing_id = room2.listing_id)"
"        ->  Seq Scan on price  (cost=0.00..296.26 rows=6837 width=11) (actual time=0.024..1.795 rows=6837 loops=1)"
"              Filter: (guests_included > 1)"
"              Rows Removed by Filter: 4704"
"        ->  Hash  (cost=2596.97..2596.97 rows=2 width=12) (actual time=5.722..5.722 rows=8 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 9kB"
"              ->  Seq Scan on room2  (cost=0.00..2596.97 rows=2 width=12) (actual time=0.054..5.712 rows=8 loops=1)"
"                    Filter: ((bathrooms > '4'::double precision) AND (security_deposit > (200)::money))"
"                    Rows Removed by Filter: 11533"
"  ->  Index Scan using listings2_pkey on listing  (cost=0.29..1.98 rows=1 width=42) (actual time=0.006..0.006 rows=1 loops=7)"
"        Index Cond: (id = price.listing_id)"
"Planning Time: 0.835 ms"
"Execution Time: 8.145 ms"

/*w/index*/

"Nested Loop  (cost=100.11..416.03 rows=1 width=53) (actual time=0.297..1.644 rows=7 loops=1)"
"  ->  Hash Join  (cost=99.83..414.05 rows=1 width=23) (actual time=0.290..1.616 rows=7 loops=1)"
"        Hash Cond: (price.listing_id = room2.listing_id)"
"        ->  Seq Scan on price  (cost=0.00..296.26 rows=6837 width=11) (actual time=0.013..1.238 rows=6837 loops=1)"
"              Filter: (guests_included > 1)"
"              Rows Removed by Filter: 4704"
"        ->  Hash  (cost=99.80..99.80 rows=2 width=12) (actual time=0.060..0.060 rows=8 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 9kB"
"              ->  Index Scan using index3a on room2  (cost=0.29..99.80 rows=2 width=12) (actual time=0.017..0.056 rows=8 loops=1)"
"                    Index Cond: (bathrooms > '4'::double precision)"
"                    Filter: (security_deposit > (200)::money)"
"                    Rows Removed by Filter: 30"
"  ->  Index Scan using listings2_pkey on listing  (cost=0.29..1.98 rows=1 width=42) (actual time=0.003..0.003 rows=1 loops=7)"
"        Index Cond: (id = price.listing_id)"
"Planning Time: 0.352 ms"
"Execution Time: 1.698 ms"

/* Query 4: w/out index: 5.720 ms; w/index: 2.911 ms */
Διαλέξαμε ως index το column id απο τον πίνακα Listing καθώς ως primary key του listing βοηθάει στην γρηγορότερη εκτέλεση του join το οποίο είναι και το πιο χρονοβόρο στο δοθέν ερώτημα.
Γιαυτό το λόγο βλέπουμε και βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
*/
/* 
EXPLAIN ANALYZE select listing.name from listing
full outer join location on location.listing_id = listing.id 
full outer join geolocation2 on location.neighbourhood_cleansed = geolocation2.properties_neighbourhood
where (cast (geolocation2.geometry_coordinates_0_0_28_0 as float) between 23.70 and 23.71) ; 
*/

/*w/out index*/

"Nested Loop Left Join  (cost=9.42..743.74 rows=256 width=38) (actual time=0.413..5.636 rows=88 loops=1)"
"  ->  Hash Right Join  (cost=9.14..411.39 rows=256 width=4) (actual time=0.311..5.123 rows=88 loops=1)"
"        Hash Cond: ((location.neighbourhood_cleansed)::text = (geolocation2.properties_neighbourhood)::text)"
"        ->  Seq Scan on location  (cost=0.00..356.41 rows=11541 width=33) (actual time=0.014..1.508 rows=11541 loops=1)"
"        ->  Hash  (cost=9.13..9.13 rows=1 width=21) (actual time=0.184..0.184 rows=1 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 9kB"
"              ->  Seq Scan on geolocation2  (cost=0.00..9.13 rows=1 width=21) (actual time=0.049..0.177 rows=1 loops=1)"
"                    Filter: (((geometry_coordinates_0_0_28_0)::double precision >= '23.7'::double precision) AND ((geometry_coordinates_0_0_28_0)::double precision <= '23.71'::double precision))"
"                    Rows Removed by Filter: 44"
"  ->  Index Scan using listings2_pkey on listing  (cost=0.29..1.30 rows=1 width=42) (actual time=0.005..0.005 rows=1 loops=88)"
"        Index Cond: (location.listing_id = id)"
"Planning Time: 0.603 ms"
"Execution Time: 5.720 ms"

/*w/index*/

"Nested Loop Left Join  (cost=9.42..743.74 rows=256 width=38) (actual time=0.163..2.862 rows=88 loops=1)"
"  ->  Hash Right Join  (cost=9.14..411.39 rows=256 width=4) (actual time=0.156..2.605 rows=88 loops=1)"
"        Hash Cond: ((location.neighbourhood_cleansed)::text = (geolocation2.properties_neighbourhood)::text)"
"        ->  Seq Scan on location  (cost=0.00..356.41 rows=11541 width=33) (actual time=0.006..0.678 rows=11541 loops=1)"
"        ->  Hash  (cost=9.13..9.13 rows=1 width=21) (actual time=0.085..0.085 rows=1 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 9kB"
"              ->  Seq Scan on geolocation2  (cost=0.00..9.13 rows=1 width=21) (actual time=0.022..0.081 rows=1 loops=1)"
"                    Filter: (((geometry_coordinates_0_0_28_0)::double precision >= '23.7'::double precision) AND ((geometry_coordinates_0_0_28_0)::double precision <= '23.71'::double precision))"
"                    Rows Removed by Filter: 44"
"  ->  Index Scan using id_index4 on listing  (cost=0.29..1.30 rows=1 width=42) (actual time=0.003..0.003 rows=1 loops=88)"
"        Index Cond: (location.listing_id = id)"
"Planning Time: 0.373 ms"
"Execution Time: 2.911 ms"

/* Query 5: w/out index: 19.225 ms; w/index: 8.374 ms */
Διαλέξαμε ως index το column host_id απο τον πίνακα Listing καθώς ως foreign key του host βοηθάει στην γρηγορότερη εκτέλεση του join το οποίο είναι και το πιο χρονοβόρο στο δοθέν ερώτημα. Γιαυτό το λόγο βλέπουμε και μεγάλη βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
*/
/*
EXPLAIN ANALYZE select host.name ,listing.name  from host inner join listing on listing.host_id= host.id 
group by host.name ,listing.name  ,verifications having verifications like '%government_id%' and verifications like '%facebook%' ;
*/

/*w/out index*/

"Group  (cost=3595.29..3602.65 rows=736 width=100) (actual time=18.712..18.967 rows=1056 loops=1)"
"  Group Key: host.name, listing.name, host.verifications"
"  ->  Sort  (cost=3595.29..3597.13 rows=736 width=100) (actual time=18.710..18.738 rows=1058 loops=1)"
"        Sort Key: host.name, listing.name, host.verifications"
"        Sort Method: quicksort  Memory: 317kB"
"        ->  Hash Join  (cost=575.52..3560.25 rows=736 width=100) (actual time=4.536..15.486 rows=1058 loops=1)"
"              Hash Cond: (listing.host_id = host.id)"
"              ->  Seq Scan on listing  (cost=0.00..2954.41 rows=11541 width=42) (actual time=0.017..9.834 rows=11541 loops=1)"
"              ->  Hash  (cost=570.44..570.44 rows=406 width=66) (actual time=4.499..4.499 rows=541 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 84kB"
"                    ->  Seq Scan on host  (cost=0.00..570.44 rows=406 width=66) (actual time=0.101..4.149 rows=541 loops=1)"
"                          Filter: (((verifications)::text ~~ '%government_id%'::text) AND ((verifications)::text ~~ '%facebook%'::text))"
"                          Rows Removed by Filter: 5822"
"Planning Time: 0.389 ms"
"Execution Time: 19.225 ms"

/*w/index*/

"Group  (cost=3355.96..3363.32 rows=736 width=100) (actual time=7.977..8.205 rows=1056 loops=1)"
"  Group Key: host.name, listing.name, host.verifications"
"  ->  Sort  (cost=3355.96..3357.80 rows=736 width=100) (actual time=7.975..8.002 rows=1058 loops=1)"
"        Sort Key: host.name, listing.name, host.verifications"
"        Sort Method: quicksort  Memory: 317kB"
"        ->  Nested Loop  (cost=0.29..3320.92 rows=736 width=100) (actual time=0.028..5.470 rows=1058 loops=1)"
"              ->  Seq Scan on host  (cost=0.00..570.44 rows=406 width=66) (actual time=0.020..3.201 rows=541 loops=1)"
"                    Filter: (((verifications)::text ~~ '%government_id%'::text) AND ((verifications)::text ~~ '%facebook%'::text))"
"                    Rows Removed by Filter: 5822"
"              ->  Index Scan using id_index5 on listing  (cost=0.29..6.75 rows=2 width=42) (actual time=0.002..0.004 rows=2 loops=541)"
"                    Index Cond: (host_id = host.id)"
"Planning Time: 0.443 ms"
"Execution Time: 8.374 ms"

/* Query 6: w/out index: 12.308 ms; w/index: 11.083 ms */
Διαλέξαμε ως index το column zipcode απο τον πίνακα location  καθως γίνεται ομαδοποίηση με βαση το zip code  αλλά δεν έγινε χρήση ουτε αυτού του index ούτε όμως των index οπως beds , listing id απο location ,listing id απο room ουτε συνδυασμού τους και αυτό συμβαίνει επειδή χρησιμοποιήσαμε την count οπότε και η χρήση του ευρετηρίου δεν ειναι εφικτή.
Γιαυτό το λόγο δεν βλέπουμε καμία βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
/* 
 EXPLAIN ANALYZE select location.zipcode, count(beds) from room2
full outer join location on location.listing_id = room2.listing_id
group by location.zipcode
having count(beds) > 100 order by count(beds) DESC;
*/

/*w/out index*/

"Sort  (cost=3132.85..3133.03 rows=72 width=14) (actual time=11.996..11.999 rows=44 loops=1)"
"  Sort Key: (count(room2.beds)) DESC"
"  Sort Method: quicksort  Memory: 27kB"
"  ->  HashAggregate  (cost=3127.95..3130.63 rows=72 width=14) (actual time=11.956..11.981 rows=44 loops=1)"
"        Group Key: location.zipcode"
"        Filter: (count(room2.beds) > 100)"
"        Rows Removed by Filter: 172"
"        ->  Hash Full Join  (cost=2654.67..3041.39 rows=11541 width=10) (actual time=4.708..9.613 rows=11541 loops=1)"
"              Hash Cond: (location.listing_id = room2.listing_id)"
"              ->  Seq Scan on location  (cost=0.00..356.41 rows=11541 width=10) (actual time=0.017..0.847 rows=11541 loops=1)"
"              ->  Hash  (cost=2510.41..2510.41 rows=11541 width=8) (actual time=4.604..4.605 rows=11541 loops=1)"
"                    Buckets: 16384  Batches: 1  Memory Usage: 579kB"
"                    ->  Seq Scan on room2  (cost=0.00..2510.41 rows=11541 width=8) (actual time=0.034..3.402 rows=11541 loops=1)"
"Planning Time: 0.147 ms"
"Execution Time: 12.308 ms"

/*w/index*/

"Sort  (cost=3132.85..3133.03 rows=72 width=14) (actual time=10.856..10.857 rows=44 loops=1)"
"  Sort Key: (count(room2.beds)) DESC"
"  Sort Method: quicksort  Memory: 27kB"
"  ->  HashAggregate  (cost=3127.95..3130.63 rows=72 width=14) (actual time=10.805..10.821 rows=44 loops=1)"
"        Group Key: location.zipcode"
"        Filter: (count(room2.beds) > 100)"
"        Rows Removed by Filter: 172"
"        ->  Hash Full Join  (cost=2654.67..3041.39 rows=11541 width=10) (actual time=5.158..9.017 rows=11541 loops=1)"
"              Hash Cond: (location.listing_id = room2.listing_id)"
"              ->  Seq Scan on location  (cost=0.00..356.41 rows=11541 width=10) (actual time=0.017..0.656 rows=11541 loops=1)"
"              ->  Hash  (cost=2510.41..2510.41 rows=11541 width=8) (actual time=5.067..5.067 rows=11541 loops=1)"
"                    Buckets: 16384  Batches: 1  Memory Usage: 579kB"
"                    ->  Seq Scan on room2  (cost=0.00..2510.41 rows=11541 width=8) (actual time=0.032..3.633 rows=11541 loops=1)"
"Planning Time: 0.194 ms"
"Execution Time: 11.083 ms"

/* Query 7: w/out index: 27.811 ms; w/index: 0.238 ms 
Διαλέξαμε ως index το column price απο τον πίνακα price  καθως γίνεται ταξινόμηση με βαση την τιμή αν πληρεί και καποια κριτήρια οπως το να εχει προφιλ pic (οπου τα περισσότερα εχουν οπότε σαν index δεν θα βοηθούσε),και το response time να ειναι within an hour οπου και αρκετά πληρουν και αυτό το κριτήριο οπότε ουτε αυτό σαν index βοηθάει .
Γιαυτό το λόγο βλέπουμε και τρομερή βελτίωση στον χρόνο μετά την χρήση του ευρετηρίου.
*/
/*
 EXPLAIN ANALYZE select host.name, price from price
inner join listing on listing.id = price.listing_id
inner join host on host.id = listing.host_id
where has_profile_pic and response_time like 'within an hour'
order by price DESC limit 10;
*/

/*w/out index*/
"Limit  (cost=4160.21..4160.23 rows=10 width=12) (actual time=27.545..27.549 rows=10 loops=1)"
"  ->  Sort  (cost=4160.21..4175.90 rows=6279 width=12) (actual time=27.543..27.543 rows=10 loops=1)"
"        Sort Key: price.price DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        ->  Hash Join  (cost=3696.48..4024.52 rows=6279 width=12) (actual time=18.784..25.732 rows=7700 loops=1)"
"              Hash Cond: (listing.host_id = host.id)"
"              ->  Hash Join  (cost=3098.67..3396.39 rows=11541 width=8) (actual time=14.277..18.861 rows=11541 loops=1)"
"                    Hash Cond: (price.listing_id = listing.id)"
"                    ->  Seq Scan on price  (cost=0.00..267.41 rows=11541 width=8) (actual time=0.024..0.880 rows=11541 loops=1)"
"                    ->  Hash  (cost=2954.41..2954.41 rows=11541 width=8) (actual time=14.150..14.150 rows=11541 loops=1)"
"                          Buckets: 16384  Batches: 1  Memory Usage: 579kB"
"                          ->  Seq Scan on listing  (cost=0.00..2954.41 rows=11541 width=8) (actual time=0.009..11.847 rows=11541 loops=1)"
"              ->  Hash  (cost=554.54..554.54 rows=3462 width=12) (actual time=4.461..4.461 rows=3472 loops=1)"
"                    Buckets: 4096  Batches: 1  Memory Usage: 191kB"
"                    ->  Seq Scan on host  (cost=0.00..554.54 rows=3462 width=12) (actual time=0.019..3.734 rows=3472 loops=1)"
"                          Filter: (has_profile_pic AND ((response_time)::text ~~ 'within an hour'::text))"
"                          Rows Removed by Filter: 2891"
"Planning Time: 0.428 ms"
"Execution Time: 27.811 ms"

/*w/index*/

"Limit  (cost=0.85..34.88 rows=10 width=12) (actual time=0.066..0.210 rows=10 loops=1)"
"  ->  Nested Loop  (cost=0.85..21367.17 rows=6279 width=12) (actual time=0.066..0.209 rows=10 loops=1)"
"        ->  Nested Loop  (cost=0.57..15896.40 rows=11541 width=8) (actual time=0.015..0.125 rows=28 loops=1)"
"              ->  Index Scan Backward using id_index7 on price  (cost=0.29..914.26 rows=11541 width=8) (actual time=0.008..0.032 rows=28 loops=1)"
"              ->  Index Scan using listings2_pkey on listing  (cost=0.29..1.30 rows=1 width=8) (actual time=0.003..0.003 rows=1 loops=28)"
"                    Index Cond: (id = price.listing_id)"
"        ->  Index Scan using host_pkey on host  (cost=0.28..0.47 rows=1 width=12) (actual time=0.003..0.003 rows=0 loops=28)"
"              Index Cond: (id = listing.host_id)"
"              Filter: (has_profile_pic AND ((response_time)::text ~~ 'within an hour'::text))"
"              Rows Removed by Filter: 1"
"Planning Time: 0.342 ms"
"Execution Time: 0.238 ms"